.program dvi_serialiser_clk
.side_set 2

.wrap_target
	out pins, 2  side 0b10
	out pins, 2  side 0b10
	out pins, 2  side 0b10
	out pins, 2  side 0b10
	out pins, 2  side 0b10
	out pins, 2  side 0b01
	out pins, 2  side 0b01
	out pins, 2  side 0b01
	out pins, 2  side 0b01
	out pins, 2  side 0b01
.wrap


.program dvi_serialiser

.wrap_target
	out pins, 2
.wrap


; The debug variant behaves as a UART with 1 start bit, 10 data bits, 1 stop
; bit, and 5/6ths the data throughput of the TMDS version.

.program dvi_serialiser_debug
.side_set 2 opt

.wrap_target
	pull side 0x1 ; FIFO stall extends stop bit
	nop  side 0x2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
	out pins, 2
.wrap

	
% c-sdk {
static inline void dvi_serialiser_program_init(PIO pio, uint sm, uint offset, uint data_pins, uint clk_pins, bool clk, bool debug) {
    pio_sm_set_pins_with_mask(pio, sm, 1u << data_pins | 1u << clk_pins, 3u << data_pins | 3u << clk_pins);
    pio_sm_set_pindirs_with_mask(pio, sm, ~0u, 3u << data_pins | 3u << clk_pins);
    // Pseudo-differential pairs:
    pio_gpio_init(pio, data_pins);
    pio_gpio_init(pio, data_pins + 1);
    pio_gpio_init(pio, clk_pins);
    pio_gpio_init(pio, clk_pins + 1);
    pio_sm_config c;
    if (debug) {
        c = dvi_serialiser_debug_program_get_default_config(offset);
        sm_config_set_sideset_pins(&c, data_pins);
    }
    else if (clk) {
        c = dvi_serialiser_clk_program_get_default_config(offset);
        sm_config_set_sideset_pins(&c, clk_pins);
    }
    else {
        c = dvi_serialiser_program_get_default_config(offset);
    }
    sm_config_set_out_pins(&c, data_pins, 2);
    // Each TMDS symbol is 10 pairs of pseudo-differential bits:
    sm_config_set_out_shift(&c, true, !debug, 20);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, false);
}
%}
