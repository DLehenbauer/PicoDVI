.program hyperram

; HyperRAM interface. HyperBus clock is clk_sys/4 at maximum.

; - out/in pins are mapped to DQx
; - set pin is mapped to RWDS
; - sideset pins are mapped to {CK, RWDS, CSn} (RWDS needn't be here except I
;   screwed up making the dev boards)
; - If variable-latency support is added, map jmp pin to RWDS
;
; Command format (all little-endian in FIFO words):
; - 1-byte initial DQ direction (always 0xff)
; - 3-byte transfer length (number of halfwords transferred - 1)
;   (total transfer must be a multiple of 4 bytes)
; - 6-byte command packet, as per HyperRAM datasheet
; - 1 byte to set DQ directions
; - 1 byte jump vector, to dispatch to read/write routine
;
; For writes, the data follows the command immediately in the TX FIFO. For
; reads, data should be popped from RX FIFO.

.side_set 3
.define LATENCY 9

;                               /--------  CK
;                               |/-------  RWDS
;                               ||/------  CSn
start: ;                        |||
    out pindirs, 8       side 0b001  [1] ; Set pins to output. Stall with CSn deasserted
    out y, 24            side 0b001  [1] ; Get data count
do_cmd:
    set x, 2             side 0b000  [1] ; Always 6 bytes in command packet
cmd_loop:
    out pins, 8          side 0b000
    nop                  side 0b100      ; Clock edge equidistant between data transitions
    out pins, 8          side 0b100
    jmp x-- cmd_loop     side 0b000

    set x, LATENCY       side 0b000
delay_loop:
    nop                  side 0b100 [1]
    jmp x-- delay_loop   side 0b000 [1]
    out pindirs, 8       side 0b100     ; Set pin directions based on 10th byte of cmd packet
    out pc, 8            side 0b100     ; Dispatch to read/write routine based on 11th byte

public read:
    nop                  side 0b000 [1]
    nop                  side 0b100 [1] ; RAM asserts first data on this edge
read_loop:
    in pins, 8           side 0b000 [1] ; Always capture when the following edge is launched
    in pins, 8           side 0b100
    jmp y--, read_loop   side 0b100
    jmp start            side 0b000 [1] ; We end up with an extra clock pulse (harmless)

public write:
    set pindirs, 1       side 0b000     ; Assert RWDS
public write_loop:
    out pins, 8          side 0b000
    nop                  side 0b100
    out pins, 8          side 0b100
    jmp y--, write_loop  side 0b000
    set pindirs, 0       side 0b000     ; Deassert RWDS, wrap back to start

; This program ignores the toggling of RWDS during reads, so assumes that the
; RAM is able to provide data continuously. This is liable to break if
; transfers cross page or row boundaries, as the memory is allowed to hold
; RWDS low to insert wait states (exact behaviour is implementation-defined).
; Easiest way to fix this is to use a second state machine to handle the read
; data.
;
; The S27KL0641 datasheet is not forthcoming, but close reading of the vendor
; model shows that it does not use this wait state mechanism (which kind of
; makes sense, because there is no corresponding mechanism to insert wait
; states on write)
